// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model Category {
  id        String      @id @default(cuid())
  name      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  items     Item[]
}

model Item {
  id          String       @id @default(cuid())
  title       String
  description String
  picePerDay  Float
  ownerId     String
  owner       User      @relation(fields: [ownerId], references: [id])
  bookings    Booking[]
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  deletedAt   DateTime?
  imageUrl    String?
  ratings     Rating[]
  categoryId  String
  category    Category @relation(fields: [categoryId], references: [id])
}

model Booking {
  id        String   @id @default(cuid())
  itemId    String @unique
  renterId  String
  item      Item  @relation(fields: [itemId], references: [id])
  renter    User     @relation(fields: [renterId], references: [id])
  startDate DateTime
  endDate   DateTime
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Rating {
  id        String   @id @default(cuid())
  itemId    String
  userId    String
  item      Item  @relation(fields: [itemId], references: [id])
  user      User     @relation(fields: [userId], references: [id])
  rating    Float
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// Start NextAuth
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  items         Item[]
  bookings      Booking[]
  ratings       Rating[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

// End NextAuth
