generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

 enum BookingStatus {
   PENDING
   ACCEPTED
   DECLINED
   EXPIRED
   CANCELLED
   DONE
 }
model Category {
  id        String   @id @default(cuid())
  name      String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  items     Item[]
}

model Location {
  id        String   @id @default(cuid())
  name      String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  items     Item[]
}

model Item {
  id          String    @id @default(cuid())
  title       String
  description String
  picePerDay  Float
  ownerId     String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  deletedAt   DateTime?
  imageUrl    String?
  categoryId  String
  locationId  String
  category    Category  @relation(fields: [categoryId], references: [id])
  location    Location  @relation(fields: [locationId], references: [id])
  owner       User      @relation(fields: [ownerId], references: [id])
  bookings    Booking[]
  ratings     Rating[]
}

model Booking {
  id        String        @id @default(cuid())
  itemId    String
  renterId  String
  startDate DateTime
  endDate   DateTime
  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt
   status    BookingStatus @default(value: PENDING)
  item      Item          @relation(fields: [itemId], references: [id])
  renter    User          @relation(fields: [renterId], references: [id])
}

model Rating {
  id        String   @id @default(cuid())
  itemId    String
  userId    String
  rating    Float
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  item      Item     @relation(fields: [itemId], references: [id])
  user      User     @relation(fields: [userId], references: [id])
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  bio           String?
  accounts      Account[]
  bookings      Booking[]
  items         Item[]
  ratings       Rating[]
  sessions      Session[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}


